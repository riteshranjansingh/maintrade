// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User profiles (you, your mom, your dad, etc.)
model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  brokerAccounts BrokerAccount[]
  orders         Order[]
  positions      Position[]
  journals       Journal[]
  watchlists     Watchlist[]
}

// Broker accounts linked to profiles
model BrokerAccount {
  id              Int      @id @default(autoincrement())
  profileId       Int
  profile         Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Broker information
  brokerName      String   // 'zerodha', 'fyers', 'mstock', 'dhan', 'shoonya', 'upstox'
  displayName     String   // User-friendly name like "My Zerodha Account"
  accountId       String   // Broker-specific account identifier
  
  // Encrypted API credentials
  apiKeyEncrypted    String   // Encrypted API key
  apiSecretEncrypted String   // Encrypted API secret
  
  // Account capabilities and status
  supportsTrading    Boolean  @default(true)   // Can place orders
  supportsData       Boolean  @default(false)  // Can fetch market data (free)
  isActive           Boolean  @default(true)   // Account is active
  isSelectedForData  Boolean  @default(false)  // Currently selected for data (only one should be true)
  
  // Usage tracking for data limits
  dailyDataRequests  Int      @default(0)      // Track daily API calls
  monthlyDataRequests Int     @default(0)      // Track monthly API calls
  lastResetDate      DateTime @default(now())  // For resetting counters
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  orders       Order[]
  positions    Position[]
  
  // Ensure unique broker per profile
  @@unique([profileId, brokerName])
}

// Trading instruments (stocks, indices, etc.)
model Instrument {
  id           Int      @id @default(autoincrement())
  symbol       String
  exchange     String
  name         String
  instrumentType String  // "STOCK", "INDEX", "FUTURE", "OPTION", etc.
  lotSize      Int?     // For F&O
  tickSize     Float?   // Minimum price movement
  expiry       DateTime? // For derivatives
  strikePrice  Float?   // For options
  optionType   String?  // "CE", "PE"
  
  // Relations
  watchlistItems WatchlistItem[]
  alerts         Alert[]
  orders         Order[]
  positions      Position[]
  
  @@unique([symbol, exchange, instrumentType, expiry, strikePrice, optionType])
}

// Price alerts
model Alert {
  id           Int      @id @default(autoincrement())
  name         String?
  instrumentId Int
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  alertType    String   // "PRICE_ABOVE", "PRICE_BELOW", "TIME_FRAME_CLOSE", "PATTERN", etc.
  value        Float    // The price value to trigger the alert
  timeFrame    String?  // "1M", "5M", "15M", "1H", etc. for timeframe-based alerts
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiryDate   DateTime?
}

// Orders placed through the platform
model Order {
  id              Int      @id @default(autoincrement())
  profileId       Int
  profile         Profile  @relation(fields: [profileId], references: [id])
  brokerAccountId Int
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])
  instrumentId    Int
  instrument      Instrument @relation(fields: [instrumentId], references: [id])
  orderType       String   // "MARKET", "LIMIT", etc.
  orderSide       String   // "BUY", "SELL"
  quantity        Int
  price           Float?   // For limit orders
  stopLoss        Float?
  target          Float?
  status          String   // "PENDING", "EXECUTED", "CANCELLED", etc.
  brokerOrderId   String?  // Order ID assigned by the broker
  placedAt        DateTime @default(now())
  executedAt      DateTime?
  updatedAt       DateTime @updatedAt
}

// Current positions
model Position {
  id              Int      @id @default(autoincrement())
  profileId       Int
  profile         Profile  @relation(fields: [profileId], references: [id])
  brokerAccountId Int
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])
  instrumentId    Int
  instrument      Instrument @relation(fields: [instrumentId], references: [id])
  quantity        Int
  averagePrice    Float
  side            String   // "LONG", "SHORT"
  openedAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Trading journal entries
model Journal {
  id              Int      @id @default(autoincrement())
  profileId       Int
  profile         Profile  @relation(fields: [profileId], references: [id])
  title           String?
  entryDate       DateTime @default(now())
  // Technical aspects (auto-filled)
  instrumentSymbol String?
  entryPrice      Float?
  exitPrice       Float?
  quantity        Int?
  pnl             Float?
  // Psychological aspects (manually filled)
  plannedTrade    Boolean?
  followedStrategy Boolean?
  emotionalState  String?  // "CALM", "ANXIOUS", "EXCITED", etc.
  notes           String?
  
  // ML-related fields
  mlPredictions   MLPrediction[]
  predictedOutcome String?  // ML-predicted outcome
  actualOutcome    String?  // Actual outcome for training
}

// Watchlists
model Watchlist {
  id              Int      @id @default(autoincrement())
  name            String
  profileId       Int
  profile         Profile  @relation(fields: [profileId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  items           WatchlistItem[]
}

// Items within watchlists
model WatchlistItem {
  id              Int      @id @default(autoincrement())
  watchlistId     Int
  watchlist       Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  instrumentId    Int
  instrument      Instrument @relation(fields: [instrumentId], references: [id])
  sortOrder       Int      @default(0)
  notes           String?
  
  @@unique([watchlistId, instrumentId])
}

// App settings including data source priorities
model Setting {
  id              Int      @id @default(autoincrement())
  key             String   @unique
  value           String
  updatedAt       DateTime @updatedAt
}

// ML Model configurations
model MLModel {
  id              Int      @id @default(autoincrement())
  name            String
  type            String   // 'STRATEGY', 'BEHAVIOR', 'ANOMALY', 'RISK', 'PATTERN'
  config          String   // JSON configuration
  status          String   // 'TRAINING', 'READY', 'ERROR'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  predictions     MLPrediction[]
  trainingSessions MLTrainingSession[]
}

// ML Training Sessions
model MLTrainingSession {
  id              Int      @id @default(autoincrement())
  modelId         Int
  model           MLModel  @relation(fields: [modelId], references: [id])
  startTime       DateTime @default(now())
  endTime         DateTime?
  metrics         String?  // JSON metrics
  status          String   // 'RUNNING', 'COMPLETED', 'FAILED'
  error           String?
}

// ML Predictions
model MLPrediction {
  id              Int      @id @default(autoincrement())
  modelId         Int
  model           MLModel  @relation(fields: [modelId], references: [id])
  input           String   // JSON input data
  prediction      String   // JSON prediction
  confidence      Float
  createdAt       DateTime @default(now())
  
  // Optional relations to other entities
  journalId       Int?
  journal         Journal? @relation(fields: [journalId], references: [id])
}